// Generated by CoffeeScript 1.3.3
(function() {
  var Perequations,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Perequations = (function() {

    function Perequations() {
      this.getPreviousDepartementInfos = __bind(this.getPreviousDepartementInfos, this);

      this.numberFormat = __bind(this.numberFormat, this);

      this.hideTooltip = __bind(this.hideTooltip, this);

      this.displayTooltip = __bind(this.displayTooltip, this);

      this.updatePreviousLevelUrl = __bind(this.updatePreviousLevelUrl, this);

      this.updateSubTitle = __bind(this.updateSubTitle, this);

      this.pushNewStateFromUrl = __bind(this.pushNewStateFromUrl, this);

      this.extractStateFromUrl = __bind(this.extractStateFromUrl, this);

      this.updatePageComponents = __bind(this.updatePageComponents, this);

      this.generateNewLevelUrl = __bind(this.generateNewLevelUrl, this);

      this.generateUrl = __bind(this.generateUrl, this);

      this.generateTitle = __bind(this.generateTitle, this);

      this.generateNewHistoryState = __bind(this.generateNewHistoryState, this);

      this.getNodeColor = __bind(this.getNodeColor, this);

      this.getNodeCenter = __bind(this.getNodeCenter, this);

      this.moveTowardsCenter = __bind(this.moveTowardsCenter, this);

      this.charge = __bind(this.charge, this);

      this.updateNodeUrl = __bind(this.updateNodeUrl, this);

      this.updateCircleCenter = __bind(this.updateCircleCenter, this);

      this.updateCircleShape = __bind(this.updateCircleShape, this);

      this.updateCircleRichessePositionScale = __bind(this.updateCircleRichessePositionScale, this);

      this.updateCircleSizeScale = __bind(this.updateCircleSizeScale, this);

      this.updateNodeValue = __bind(this.updateNodeValue, this);

      this.getCurrentData = __bind(this.getCurrentData, this);

      this.getCurrentState = __bind(this.getCurrentState, this);

      this.updateNodes = __bind(this.updateNodes, this);

      this.updateVis = __bind(this.updateVis, this);

      this.createVis = __bind(this.createVis, this);

      this.start = __bind(this.start, this);

      this.initEvents = __bind(this.initEvents, this);
      this.appSettings = {
        applicationRootUrl: window.appUrl || window.location.protocol + '//' + window.location.hostname,
        numberFormat: "# ##0."
      };
      this.graphSettings = {
        width: $(".data").width(),
        height: $(".data").height(),
        layoutGravity: -0.01,
        damper: 0.07,
        animationSpeed: 1000,
        circleRange: {
          min: 20,
          max: 80
        },
        circleOpacity: 0.8
      };
      this.graphSettings["centers"] = {
        receive: {
          x: Math.round(2.5 * this.graphSettings.width / 10),
          y: Math.round(this.graphSettings.height / 2)
        },
        neutral: {
          x: Math.round(this.graphSettings.width / 2),
          y: Math.round(this.graphSettings.height / 2)
        },
        give: {
          x: Math.round(7.5 * this.graphSettings.width / 10),
          y: Math.round(this.graphSettings.height / 2)
        }
      };
      this.graphSettings["colors"] = {
        give: "#DD003F",
        neutral: "#F7C63C",
        receive: "#86BC31"
      };
      this.history = window.History;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circleSizeScale = null;
      this.circleRichesseRevenuPositionScale = null;
      this.circleRichessePotentielPositionScale = null;
      this.axeExtremeValues = {
        revenu: {
          min: 0,
          max: 0
        },
        potentiel: {
          min: 0,
          max: 0
        }
      };
      this.currentState = null;
      this.rollbackState = null;
      this.updatePageComponents();
      this.initEvents();
      this.start();
      this.createVis();
    }

    Perequations.prototype.initEvents = function() {
      var that,
        _this = this;
      that = this;
      $(document).ajaxError(function(event, jqXHR, ajaxSettings, thrownError) {
        if (jqXHR.status === 403) {
          return $('#unautorized').modal('show');
        }
      });
      $(document).ajaxStart(function() {
        return $("body").addClass('busy');
      });
      $(document).ajaxStop(function() {
        return $("body").removeClass('busy');
      });
      $('.perequation a').on('click', function(event) {
        event.preventDefault();
        if ($(this).hasClass("disabled")) {
          return false;
        } else {
          return that.generateNewHistoryState({
            perequation: $(this).attr("value"),
            change: "perequation"
          });
        }
      });
      $('.view_selector button').on('click', function(event) {
        event.preventDefault();
        return that.generateNewHistoryState({
          view: $(this).data("view"),
          change: "view"
        });
      });
      $('.richesse_selector button').on('click', function(event) {
        event.preventDefault();
        if (!$(this).hasClass("disabled")) {
          that.generateNewHistoryState({
            richesse: $(this).data("richesse"),
            change: "view"
          });
        }
        return false;
      });
      $(document).on('click', '.data a, nav.perequation_level a.change_level', function(event) {
        event.preventDefault();
        if (!$(this).hasClass("disabled")) {
          that.pushNewStateFromUrl($(this).attr("href"));
        }
        return false;
      });
      $('#unautorized .rollback').on('click', function(event) {
        ga('send', 'event', 'subscription', 'no');
        return _this.generateNewHistoryState(_this.rollbackState, true);
      });
      $('#unautorized .identify').on('click', function(event) {
        var currentUrl;
        currentUrl = window.location.href;
        if ($(_this).hasClass("register")) {
          ga('send', 'event', 'subscription', 'yes');
          ga('send', 'event', 'subscription-from', currentUrl);
        } else {
          ga('send', 'event', 'subscription', 'identify');
        }
        return window.location.href = encodeURI("" + _this.appSettings.applicationRootUrl + "/identifier?url=" + currentUrl);
      });
      return History.Adapter.bind(window, "statechange", function() {
        var currentState;
        currentState = _this.getCurrentState();
        if (currentState.change === "perequation") {
          that.updateNodeValue();
          _this.updateCircleShape();
          _this.updateNodeUrl();
          _this.force.start();
        } else if (currentState.change === "view") {
          _this.updateNodeUrl();
          _this.force.start();
        } else if (currentState.change === "level") {
          that.updateVis();
        }
        _this.updatePreviousLevelUrl();
        return _this.updatePageComponents();
      });
    };

    Perequations.prototype.start = function() {
      var _this = this;
      this.force = d3.layout.force().nodes(this.nodes).size([this.graphSettings.width, this.graphSettings.height]);
      return this.force.gravity(this.graphSettings.layoutGravity).charge(this.charge).friction(0.9).on("tick", function(e) {
        return _this.vis.selectAll("g.node").each(_this.moveTowardsCenter(e.alpha)).attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
      });
    };

    Perequations.prototype.createVis = function() {
      var _this = this;
      this.vis = d3.select(".data").append("svg").attr("width", this.graphSettings.width).attr("height", this.graphSettings.height);
      this.vis.append("svg:defs").selectAll("marker").data(["endArrow"]).enter().append("svg:marker").attr("id", String).attr("viewBox", "0 -5 10 10").attr("refX", 10).attr("refY", 0).attr("markerWidth", 15).attr("markerHeight", 15).attr("orient", "auto").attr("fill", "#555").append("svg:path").attr("d", "M0,-5L10,0L0,5");
      this.vis.append("g").attr("class", "richesse-line").attr("opacity", this.currentState.view === "richesse" ? 1 : 0).append("svg:line").attr("x1", 0).attr("y1", Math.round(this.graphSettings.height / 2)).attr("x2", this.graphSettings.width).attr("y2", Math.round(this.graphSettings.height / 2)).style("stroke", "#555").style("stroke-width", 1).attr("marker-end", "url(#endArrow)");
      this.vis.append("g").attr("class", "min-value").attr("opacity", this.currentState.view === "richesse" ? 1 : 0).append("text").attr("x", 0).attr("y", Math.round(this.graphSettings.height / 2) + 30).attr("fill", "#555");
      this.vis.append("g").attr("class", "max-value").attr("opacity", this.currentState.view === "richesse" ? 1 : 0).append("text").attr("x", this.graphSettings.width).attr("y", Math.round(this.graphSettings.height / 2) + 30).attr("fill", "#555").attr("text-anchor", "end");
      _.each(_.keys(this.graphSettings["colors"]), function(key) {
        return $(".legende .color." + key).css("background-color", _this.graphSettings["colors"][key]);
      });
      d3.select(".data").append("div").attr("class", "circle-tooltip");
      return this.updateVis();
    };

    Perequations.prototype.updateVis = function() {
      var that,
        _this = this;
      that = this;
      return this.updateNodes(function() {
        var circles, groups;
        groups = _this.vis.selectAll("g.node").remove().data(_this.nodes, function(d) {
          return _this.currentState.type + ("_" + d.id);
        });
        groups.enter().append("g").attr("class", "node").attr("id", function(d) {
          return d.id;
        }).attr("x", function(d) {
          return d.x;
        }).attr("y", function(d) {
          return d.y;
        });
        circles = groups.append("circle").attr("r", 0).attr("fill", function(d) {
          return _this.getNodeColor(d);
        }).attr("fill-opacity", _this.graphSettings.circleOpacity).attr("stroke-width", 1).attr("stroke", function(d) {
          return d3.rgb(_this.getNodeColor(d)).darker();
        }).on("mouseover", function(d) {
          return that.displayTooltip(d, this);
        }).on("mouseout", function(d) {
          return that.hideTooltip(this);
        });
        groups.append("a").attr("class", "change_level").attr("xlink:href", function(d) {
          return _this.generateNewLevelUrl(d.levelId);
        }).attr("groupId", function(d) {
          return d.id;
        }).on("mouseover", function(d) {
          return that.displayTooltip(d, this, true);
        }).on("mouseout", function(d) {
          return that.hideTooltip(this);
        }).append("text").attr("text-anchor", "middle").attr("dy", ".35em").text(function(d) {
          return d.code;
        });
        groups.call(_this.force.drag);
        circles.transition().duration(_this.graphSettings.animationSpeed).attr("r", function(d) {
          return d.radius;
        });
        if (_this.currentState.richesse === "potentiel") {
          d3.select("g.min-value text").text("" + (_this.numberFormat(_this.axeExtremeValues.potentiel.min)) + " €");
          d3.select("g.max-value text").text("" + (_this.numberFormat(_this.axeExtremeValues.potentiel.max)) + " €");
        } else {
          d3.select("g.min-value text").text("" + (_this.numberFormat(_this.axeExtremeValues.revenu.min)) + " €");
          d3.select("g.max-value text").text("" + (_this.numberFormat(_this.axeExtremeValues.revenu.max)) + " €");
        }
        _this.force.start();
        return _this.hideTooltip();
      });
    };

    Perequations.prototype.updateNodes = function(callback) {
      var currentState,
        _this = this;
      currentState = this.getCurrentState();
      return this.getCurrentData(currentState, function(data) {
        _this.nodes.length = 0;
        currentState.departementId = null;
        _.each(data, function(element, index, list) {
          var node;
          node = {
            id: currentState.type + "_" + element.id,
            levelId: element.id,
            nom: element.nom,
            population: parseInt(element.population),
            revenu: {
              value: parseInt(element.revenu_hab),
              moyen: parseInt(element.revenu_hab_moyen),
              rang: parseInt(element.revenu_hab_rang)
            },
            fpic: {
              value: parseInt(element.fpic_2012),
              rang: parseInt(element.fpic_rang_2012),
              hab: parseFloat(element.fpic_hab_2012).toFixed(2),
              habRang: parseInt(element.fpic_hab_rang_2012)
            },
            total: {
              value: parseInt(element.total_2012),
              rang: parseInt(element.total_rang_2012),
              hab: parseFloat(element.total_hab_2012).toFixed(2),
              habRang: parseInt(element.total_hab_rang_2012)
            }
          };
          if (currentState.type === "france") {
            node.code = element.code;
            node.dmto = {
              value: parseInt(element.dmto_2012),
              rang: parseInt(element.dmto_rang_2012),
              hab: parseFloat(element.dmto_hab_2012).toFixed(2),
              habRang: parseInt(element.dmto_hab_rang_2012)
            };
          } else if (currentState.type === "regions") {
            node.code = _this.leadingZero(element.id);
            node.potentielFiscal = {
              value: parseInt(element.potentiel_fiscal_hab),
              moyen: parseInt(element.potentiel_fiscal_moyen),
              rang: parseInt(element.potentiel_fiscal_rang)
            };
            node.dmto = {
              value: parseInt(element.dmto_2012),
              rang: parseInt(element.dmto_rang_2012),
              hab: parseFloat(element.dmto_hab_2012).toFixed(2),
              habRang: parseInt(element.dmto_hab_rang_2012)
            };
          } else if (currentState.type === "departements") {
            node.potentielFiscal = {
              value: parseInt(element.potentiel_fiscal_hab),
              moyen: parseInt(element.potentiel_fiscal_hab_moyen),
              rang: parseInt(element.potentiel_fiscal_hab_rang)
            };
            if (!currentState.departementId) {
              currentState.departementId = element.departement_id;
            }
          }
          return _this.nodes.push(node);
        });
        _this.updatePreviousLevelUrl();
        _this.updateNodeValue();
        return callback();
      });
    };

    Perequations.prototype.getCurrentState = function() {
      var currentState, historyState;
      historyState = this.history.getState();
      if ($.isEmptyObject(historyState.data)) {
        currentState = this.extractStateFromUrl(window.location.href);
        if (currentState) {
          return this.currentState = currentState;
        } else {
          return false;
        }
      } else {
        return this.currentState = historyState.data;
      }
    };

    Perequations.prototype.getCurrentData = function(state, callback) {
      var dataUriParameters, stateData;
      stateData = this.currentState;
      dataUriParameters = null;
      if (stateData) {
        switch (stateData.type) {
          case "france":
            dataUriParameters = {
              niveau: "regions",
              collectivite: "all"
            };
            break;
          case "regions":
            dataUriParameters = {
              niveau: "departements/region",
              collectivite: stateData.id
            };
            break;
          case "departements":
            dataUriParameters = {
              niveau: "intercos/departement",
              collectivite: stateData.id
            };
        }
        return $.ajax({
          url: this.appSettings.applicationRootUrl + "/api/" + dataUriParameters.niveau + "/" + dataUriParameters.collectivite,
          dataType: 'json',
          success: function(data) {
            return callback(data);
          }
        });
      } else {
        return console.log("There is no defined state!");
      }
    };

    Perequations.prototype.updateNodeValue = function() {
      var _this = this;
      _.each(this.nodes, function(element, index, list) {
        switch (_this.currentState.perequation) {
          case "dmto":
            return element.value = element.dmto.value;
          case "fpic":
            return element.value = element.fpic.value;
          default:
            return element.value = element.total.value;
        }
      });
      this.updateCircleSizeScale();
      return this.updateCircleRichessePositionScale();
    };

    Perequations.prototype.updateCircleSizeScale = function() {
      var circleMaxSize, circleMinSize, max, min,
        _this = this;
      min = _.min(this.nodes, function(node) {
        return Math.abs(node.value);
      });
      max = _.max(this.nodes, function(node) {
        return Math.abs(node.value);
      });
      if (this.nodes.length < 30) {
        circleMinSize = this.graphSettings.circleRange.min;
        circleMaxSize = this.graphSettings.circleRange.max;
      } else {
        circleMinSize = this.graphSettings.circleRange.min / 2;
        circleMaxSize = this.graphSettings.circleRange.max / 2;
      }
      this.circleSizeScale = d3.scale.linear().domain([Math.abs(min.value), Math.abs(max.value)]).range([circleMinSize, circleMaxSize]);
      return _.each(this.nodes, function(element, index, list) {
        return element.radius = _this.circleSizeScale(Math.abs(element.value));
      });
    };

    Perequations.prototype.updateCircleRichessePositionScale = function() {
      var maxPotentiel, maxRevenu, minPotentiel, minRevenu;
      minRevenu = _.min(this.nodes, function(node) {
        return node.revenu.value;
      });
      maxRevenu = _.max(this.nodes, function(node) {
        return node.revenu.value;
      });
      this.axeExtremeValues.revenu.min = minRevenu.revenu.value;
      this.axeExtremeValues.revenu.max = maxRevenu.revenu.value;
      this.circleRichesseRevenuPositionScale = d3.scale.linear().domain([minRevenu.revenu.value, maxRevenu.revenu.value]).range([this.graphSettings.centers.receive.x - 50, this.graphSettings.centers.give.x + 50]);
      if (this.currentState.type === "regions") {
        minPotentiel = _.min(this.nodes, function(node) {
          return node.potentielFiscal.value;
        });
        maxPotentiel = _.max(this.nodes, function(node) {
          return node.potentielFiscal.value;
        });
        this.axeExtremeValues.potentiel.min = minPotentiel.potentielFiscal.value;
        this.axeExtremeValues.potentiel.max = maxPotentiel.potentielFiscal.value;
        return this.circleRichessePotentielPositionScale = d3.scale.linear().domain([minPotentiel.potentielFiscal.value, maxPotentiel.potentielFiscal.value]).range([this.graphSettings.centers.receive.x - 50, this.graphSettings.centers.give.x + 50]);
      }
    };

    Perequations.prototype.updateCircleShape = function() {
      var _this = this;
      return this.vis.selectAll("circle").data(this.nodes, function(d) {
        return _this.currentState.type + ("_" + d.id);
      }).transition().duration(this.graphSettings.animationSpeed).attr("r", function(d) {
        return d.radius;
      }).attr("fill", function(d) {
        return _this.getNodeColor(d);
      }).attr("stroke", function(d) {
        return d3.rgb(_this.getNodeColor(d)).darker();
      });
    };

    Perequations.prototype.updateCircleCenter = function() {
      var _this = this;
      this.centers.length = 0;
      return _.each(this.nodes, function(element, index, list) {
        return element.center = _this.getNodeCenter(element);
      });
    };

    Perequations.prototype.updateNodeUrl = function() {
      var _this = this;
      return this.vis.selectAll("a").attr("xlink:href", function(d) {
        return _this.generateNewLevelUrl(d.levelId);
      });
    };

    Perequations.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    Perequations.prototype.moveTowardsCenter = function(alpha) {
      var _this = this;
      return function(d) {
        var center;
        center = _this.getNodeCenter(d);
        d.x = d.x + (center.x - d.x) * (_this.graphSettings.damper + 0.02) * alpha * 1.1;
        return d.y = d.y + (center.y - d.y) * (_this.graphSettings.damper + 0.02) * alpha * 1.1;
      };
    };

    Perequations.prototype.getNodeCenter = function(node) {
      var center;
      if (this.currentState.view === "donnees") {
        if (node.value > 999) {
          return this.graphSettings.centers.receive;
        } else if (node.value < -999) {
          return this.graphSettings.centers.give;
        } else {
          return this.graphSettings.centers.neutral;
        }
      } else {
        if (this.currentState.type === "regions" && this.currentState.richesse === "potentiel") {
          return center = {
            x: this.circleRichessePotentielPositionScale(node.potentielFiscal.value),
            y: this.graphSettings.height / 2
          };
        } else {
          return center = {
            x: this.circleRichesseRevenuPositionScale(node.revenu.value),
            y: this.graphSettings.height / 2
          };
        }
      }
    };

    Perequations.prototype.getNodeColor = function(node) {
      if (node.value > 999) {
        return this.graphSettings.colors.receive;
      } else if (node.value < -999) {
        return this.graphSettings.colors.give;
      } else {
        return this.graphSettings.colors.neutral;
      }
    };

    Perequations.prototype.generateNewHistoryState = function(stateAttributes, force) {
      var page, title, url;
      if (force == null) {
        force = false;
      }
      this.rollbackState = _.clone(this.currentState);
      if (force) {
        this.currentState = stateAttributes;
      } else {
        _.extend(this.currentState, stateAttributes);
      }
      title = this.generateTitle(this.currentState);
      url = this.generateUrl();
      page = url.replace(this.appSettings.applicationRootUrl, '');
      ga('send', 'pageview', {
        'page': page,
        'title': title
      });
      return History.pushState(this.currentState, title, url);
    };

    Perequations.prototype.generateTitle = function(state) {
      var title;
      title = "A qui profitent les péréquations :";
      switch (this.currentState.view) {
        case "donnees":
          title += " Données";
          break;
        case "richesse":
          title += " Richesse";
          break;
        case "comparer":
          title += " Comparer";
      }
      switch (this.currentState.perequation) {
        case "toutes":
          title += " - Toutes les péréquations";
          break;
        case "dmto":
          title += " - DMTO";
          break;
        case "fpic":
          title += " - FPIC";
      }
      switch (this.currentState.type) {
        case "france":
          title += " - France";
          break;
        case "regions":
          title += " - Région:";
          break;
        case "departements":
          title += " - Département:";
      }
      if ((this.currentState.type === "regions" || this.currentState.type === "departements") && this.currentState.id) {
        if (this.currentState.name) {
          title += " " + this.currentState.name;
        } else {
          title += " " + this.currentState.id;
        }
      }
      return title;
    };

    Perequations.prototype.generateUrl = function(newStateAttributes) {
      var stateAttributes, url;
      stateAttributes = _.clone(this.currentState);
      _.extend(stateAttributes, newStateAttributes);
      url = this.appSettings.applicationRootUrl + "/" + stateAttributes.view + "/" + stateAttributes.perequation + "/" + stateAttributes.type;
      if (stateAttributes.id) {
        url += "/" + stateAttributes.id;
      }
      if (stateAttributes.view === "richesse" && stateAttributes.richesse) {
        url += "/" + stateAttributes.richesse;
      }
      return url;
    };

    Perequations.prototype.generateNewLevelUrl = function(id, down) {
      var newStateAttributes;
      if (id == null) {
        id = "";
      }
      if (down == null) {
        down = true;
      }
      newStateAttributes = {
        type: null,
        id: null
      };
      if (down) {
        if (this.currentState.type === "france") {
          newStateAttributes.type = "regions";
        }
        if (this.currentState.type === "regions") {
          newStateAttributes.type = "departements";
          newStateAttributes.perequation = "fpic";
        }
        newStateAttributes.richesse = "revenu";
        newStateAttributes.id = id;
      } else {
        if (this.currentState.type === "regions") {
          newStateAttributes.type = "france";
          if (this.currentState.view === "richesse") {
            newStateAttributes.richesse = "revenu";
          }
        }
        if (this.currentState.type === "departements") {
          newStateAttributes.type = "regions";
        }
        newStateAttributes.id = id;
      }
      return this.generateUrl(newStateAttributes);
    };

    Perequations.prototype.updatePageComponents = function() {
      if (!this.currentState) {
        this.getCurrentState();
      }
      $(".perequation .btn.active").removeClass("active");
      $(".perequation .btn." + this.currentState.perequation).addClass("active");
      if (this.currentState.type === "regions") {
        $(".notice.richesse .departement").show();
      } else {
        $(".notice.richesse .departement").hide();
      }
      if (this.currentState.type === "departements") {
        $(".perequation .btn:not(.fpic)").addClass("disabled");
      } else {
        $(".perequation .btn.disabled").removeClass("disabled");
      }
      if (this.currentState.view === "richesse") {
        d3.selectAll("g.richesse-line, g.min-value, g.max-value").transition().duration(this.graphSettings.animationSpeed / 2).attr("opacity", 1);
        d3.selectAll("g.group-label").transition().duration(this.graphSettings.animationSpeed / 2).attr("opacity", 0);
        $(".notices").removeClass("donnees").addClass("richesse");
      } else {
        d3.selectAll("g.richesse-line, g.min-value, g.max-value").transition().duration(this.graphSettings.animationSpeed / 2).attr("opacity", 0);
        d3.selectAll("g.group-label").transition().duration(this.graphSettings.animationSpeed / 2).attr("opacity", 1);
        $(".notices").removeClass("richesse").addClass("donnees");
      }
      if (this.currentState.view === "richesse") {
        $(".view_selector .donnees").removeClass("active");
        $(".view_selector .richesse").addClass("active");
        $(".richesse_selector").css("visibility", "visible");
        if (this.currentState.type === "regions") {
          $(".richesse_selector .btn.disabled").removeClass("disabled");
        } else {
          $(".richesse_selector .btn:not(.revenu)").addClass("disabled");
        }
        if (this.currentState.richesse === "potentiel") {
          $(".richesse_selector .potentiel").addClass("active");
          $(".richesse_selector .revenu").removeClass("active");
          d3.select("g.min-value text").text("" + (this.numberFormat(this.axeExtremeValues.potentiel.min)) + " €");
          d3.select("g.max-value text").text("" + (this.numberFormat(this.axeExtremeValues.potentiel.max)) + " €");
        } else {
          $(".richesse_selector .potentiel").removeClass("active");
          $(".richesse_selector .revenu").addClass("active");
          d3.select("g.min-value text").text("" + (this.numberFormat(this.axeExtremeValues.revenu.min)) + " €");
          d3.select("g.max-value text").text("" + (this.numberFormat(this.axeExtremeValues.revenu.max)) + " €");
        }
      } else {
        $(".richesse_selector").css("visibility", "hidden");
        $(".view_selector .donnees").addClass("active");
        $(".view_selector .richesse").removeClass("active");
      }
      return this.updateSubTitle();
    };

    Perequations.prototype.extractStateFromUrl = function(url) {
      var state, uri_match, uri_re;
      uri_re = new RegExp("^" + this.appSettings.applicationRootUrl + "/(donnees|richesse|comparer)/(toutes|dmto|fpic)/(france|regions|departements)/?([0-9A-B]{1,3})?/?(potentiel|revenu)?$");
      uri_match = uri_re.exec(url);
      if (uri_match) {
        state = {
          view: uri_match[1],
          perequation: uri_match[2],
          type: uri_match[3],
          id: uri_match[4],
          richesse: uri_match[5]
        };
        if (state.type !== "regions" && state.view === "richesse") {
          state.richesse = "revenu";
        }
        if (state.type === "departements") {
          state.perequation = "fpic";
        }
        return state;
      } else {
        return null;
      }
    };

    Perequations.prototype.pushNewStateFromUrl = function(url) {
      var state;
      state = this.extractStateFromUrl(url);
      state.change = "level";
      return this.generateNewHistoryState(state);
    };

    Perequations.prototype.updateSubTitle = function() {
      var title;
      switch (this.currentState.type) {
        case "france":
          title = "Les données par régions";
          break;
        case "regions":
          title = "Les départements de la région " + this.getLevelCollectiviteName(this.currentState.type, this.currentState.id);
          break;
        case "departements":
          title = "Les intercommunalités du département " + this.getLevelCollectiviteName(this.currentState.type, this.currentState.id);
      }
      return $("nav.perequation_level h2").text(title);
    };

    Perequations.prototype.updatePreviousLevelUrl = function() {
      var regionId;
      if (this.currentState.type === "france") {
        $("nav.perequation_level .change_level").css("visibility", "hidden");
        return $("nav.perequation_level .change_level").attr("href", this.generateUrl());
      } else if (this.currentState.type === "regions") {
        $("nav.perequation_level .change_level .level_name").text("Les données par régions");
        $("nav.perequation_level .change_level").css("visibility", "visible");
        return $("nav.perequation_level .change_level").attr("href", this.generateNewLevelUrl(null, false));
      } else if (this.currentState.type === "departements") {
        $("nav.perequation_level .change_level").css("visibility", "visible");
        regionId = this.getPreviousDepartementInfos(this.currentState.departementId);
        $("nav.perequation_level .change_level .level_name").text("Les départements de la région " + this.getLevelCollectiviteName("regions", regionId));
        return $("nav.perequation_level .change_level").attr("href", this.generateNewLevelUrl(regionId, false));
      }
    };

    Perequations.prototype.displayTooltip = function(node, circle, link) {
      var content, groupId, height, params, tooltip;
      if (link == null) {
        link = false;
      }
      if (link) {
        groupId = d3.select(circle).attr('groupId');
        circle = d3.select("g#" + groupId + " circle")[0][0];
      }
      d3.select(circle).attr("fill-opacity", 1);
      content = "<div class=\"title\">" + node.nom + "</div>            <ul>                <li class='header'>Population</li>";
      if (isNaN(node.population)) {
        content += "<li>Données non disponibles</li>";
      } else {
        content += "<li>" + (format(this.appSettings.numberFormat, node.population)) + " habitants</li>";
      }
      content += "<li class='header'>Revenu par habitant</li>                <li>" + (format(this.appSettings.numberFormat, node.revenu.value)) + " &euro; / Rang : " + node.revenu.rang + "</li>                <li>Moyenne nationale : " + (format(this.appSettings.numberFormat, node.revenu.moyen)) + " &euro;</li>                <li class='header'>Perequations</li>            ";
      if (isNaN(node.total.habRang)) {
        content += "<li class='section'><b>Total par habitant : " + (this.numberFormat(node.total.hab)) + " &euro; / Rang : non applicable</b></li>";
      } else {
        content += "<li class='section'><b>Total par habitant : " + (this.numberFormat(node.total.hab)) + " &euro; / Rang : " + node.total.habRang + "</b></li>";
      }
      if (isNaN(node.total.rang)) {
        content += "<li>Total : " + (this.numberFormat(node.total.value)) + " &euro; / Rang : non applicable</li>";
      } else {
        content += "<li>Total : " + (this.numberFormat(node.total.value)) + " &euro; / Rang : " + node.total.rang + "</li>";
      }
      if (isNaN(node.fpic.habRang)) {
        content += "<li class='section'><b>FPIC par habitant : " + (this.numberFormat(node.fpic.hab)) + " &euro; / Rang : non applicable</b></li>";
      } else {
        content += "<li class='section'><b>FPIC par habitant : " + (this.numberFormat(node.fpic.hab)) + " &euro; / Rang : " + node.fpic.habRang + "</b></li>";
      }
      if (isNaN(node.fpic.rang)) {
        content += "<li>FPIC : " + (this.numberFormat(node.fpic.value)) + " &euro; / Rang : non applicable</li>";
      } else {
        content += "<li>FPIC : " + (this.numberFormat(node.fpic.value)) + " &euro; / Rang : " + node.fpic.rang + "</li>";
      }
      if (this.currentState.type !== "departements") {
        if (isNaN(node.dmto.habRang)) {
          content += "<li class='section'><b>DMTO par habitant : " + (this.numberFormat(node.dmto.hab)) + " &euro; / Rang : non applicable</b></li>";
        } else {
          content += "<li class='section'><b>DMTO par habitant : " + (this.numberFormat(node.dmto.hab)) + " &euro; / Rang : " + node.dmto.habRang + "</b></li>";
        }
        if (isNaN(node.dmto.rang)) {
          content += "<li>DMTO : " + (this.numberFormat(node.dmto.value)) + " &euro; / Rang : non applicable</li>";
        } else {
          content += "<li>DMTO : " + (this.numberFormat(node.dmto.value)) + " &euro; / Rang : " + node.dmto.rang + "</li>";
        }
      }
      if (this.currentState.type !== "france" && node.potentielFiscal && node.potentielFiscal.value) {
        content += "<li class='header'>Potentiel fiscal par habitant</li>                        <li>" + (this.numberFormat(node.potentielFiscal.value)) + " &euro; / Rang : " + node.potentielFiscal.rang + "</li>                        <li>Moyenne nationale : " + (this.numberFormat(node.potentielFiscal.moyen)) + " &euro;</li>";
      }
      content += "</ul>";
      tooltip = $(".circle-tooltip");
      tooltip.css("height", "auto");
      tooltip.html(content);
      height = tooltip.height();
      tooltip.removeAttr("style");
      params = {
        top: Math.round(node.y - (height / 2) - 10) + "px"
      };
      if (node.x < (this.graphSettings.width / 2)) {
        params.left = Math.round(node.x + 50) + "px";
        tooltip.removeClass('right');
        tooltip.addClass('left');
      } else {
        params.right = Math.round(this.graphSettings.width - node.x + 50) + "px";
        tooltip.removeClass('left');
        tooltip.addClass('right');
      }
      tooltip.css(params);
      return tooltip.addClass("show");
    };

    Perequations.prototype.hideTooltip = function(circle) {
      if (circle == null) {
        circle = false;
      }
      if (circle) {
        d3.select(circle).attr("fill-opacity", this.graphSettings.circleOpacity);
      }
      return $(".circle-tooltip").removeClass("show");
    };

    Perequations.prototype.leadingZero = function(id) {
      if (String(id).length === 1) {
        return "0" + id;
      } else {
        return String(id);
      }
    };

    Perequations.prototype.numberFormat = function(number) {
      if (parseInt(number) > 0) {
        return "+ " + (format(this.appSettings.numberFormat, number));
      } else {
        return format(this.appSettings.numberFormat, number);
      }
    };

    Perequations.prototype.getLevelCollectiviteName = function(level, id) {
      var departements, regions;
      regions = {
        '11': 'Ile-de-France',
        '21': 'Champagne-Ardenne',
        '22': 'Picardie',
        '23': 'Haute-Normandie',
        '24': 'Centre',
        '25': 'Basse-Normandie',
        '26': 'Bourgogne',
        '31': 'Nord-Pas-de-Calais',
        '41': 'Lorraine',
        '42': 'Alsace',
        '43': 'Franche-Comté',
        '52': 'Pays-de-La-Loire',
        '53': 'Bretagne',
        '54': 'Poitou-Charentes',
        '72': 'Aquitaine',
        '73': 'Midi-Pyrénées',
        '74': 'Limousin',
        '82': 'Rhone-Alpes',
        '83': 'Auvergne',
        '91': 'Languedoc-Roussillon',
        '93': 'Provence-Alpes-Côte-d\'Azur',
        '94': 'Corse'
      };
      departements = {
        '62': 'Pas-de-Calais',
        '57': 'Moselle',
        '67': 'Bas-Rhin',
        '49': 'Maine-et-Loire',
        '29': 'Finistère',
        '22': 'Côtes-dArmor',
        '2': 'Aisne',
        '71': 'Saône-et-Loire',
        '42': 'Loire',
        '23': 'Creuse',
        '54': 'Meurthe-et-Moselle',
        '72': 'Sarthe',
        '63': 'Puy-de-Dôme',
        '50': 'Manche',
        '80': 'Somme',
        '36': 'Indre',
        '27': 'Eure',
        '52': 'Haute-Marne',
        '88': 'Vosges',
        '48': 'Lozère',
        '43': 'Haute-Loire',
        '86': 'Vienne',
        '79': 'Deux-Sèvres',
        '53': 'Mayenne',
        '70': 'Haute-Saône',
        '81': 'Tarn',
        '55': 'Meuse',
        '15': 'Cantal',
        '3': 'Allier',
        '24': 'Dordogne',
        '8': 'Ardennes',
        '61': 'Orne',
        '12': 'Aveyron',
        '47': 'Lot-et-Garonne',
        '25': 'Doubs',
        '16': 'Charente',
        '7': 'Ardèche',
        '58': 'Nièvre',
        '87': 'Haute-Vienne',
        '19': 'Corrèze',
        '89': 'Yonne',
        '18': 'Cher',
        '65': 'Hautes-Pyrénées',
        '9': 'Ariège',
        '41': 'Loir-et-Cher',
        '32': 'Gers',
        '46': 'Lot',
        '82': 'Tarn-et-Garonne',
        '39': 'Jura',
        '10': 'Aube',
        '2B': 'Haute-Corse',
        '90': 'Territoire de Belfort',
        '5': 'Hautes-Alpes',
        '4': 'Alpes-de-Haute-Provence',
        '11': 'Aude',
        '28': 'Eure-et-Loir',
        '51': 'Marne',
        '45': 'Loiret',
        '37': 'Indre-et-Loire',
        '85': 'Vendée',
        '40': 'Landes',
        '21': 'Côte-dOr',
        '66': 'Pyrénées-Orientales',
        '68': 'Haut-Rhin',
        '56': 'Morbihan',
        '60': 'Oise',
        '30': 'Gard',
        '14': 'Calvados',
        '1': 'Ain',
        '35': 'Ille-et-Vilaine',
        '2A': 'Corse-du-Sud',
        '64': 'Pyrénées-Atlantiques',
        '26': 'Drôme',
        '17': 'Charente-Maritime',
        '76': 'Seine-Maritime',
        '84': 'Vaucluse',
        '34': 'Hérault',
        '73': 'Savoie',
        '31': 'Haute-Garonne',
        '95': 'Val-dOise',
        '77': 'Seine-et-Marne',
        '38': 'Isère',
        '44': 'Loire-Atlantique',
        '33': 'Gironde',
        '59': 'Nord',
        '93': 'Seine-Saint-Denis',
        '91': 'Essonne',
        '74': 'Haute-Savoie',
        '94': 'Val-de-Marne',
        '13': 'Bouches-du-Rhône',
        '83': 'Var',
        '69': 'Rhône',
        '78': 'Yvelines',
        '6': 'Alpes-Maritimes',
        '92': 'Hauts-de-Seine',
        '75': 'Paris'
      };
      if (level === "regions") {
        return regions[String(id)];
      } else if (level === "departements") {
        return departements[String(id)];
      }
    };

    Perequations.prototype.getPreviousDepartementInfos = function(departementId) {
      var departements;
      departements = {
        '1': '82',
        '10': '21',
        '11': '91',
        '12': '73',
        '13': '93',
        '14': '25',
        '15': '83',
        '16': '54',
        '17': '54',
        '18': '24',
        '19': '74',
        '2': '22',
        '2A': '94',
        '2B': '94',
        '21': '26',
        '22': '53',
        '23': '74',
        '24': '72',
        '25': '43',
        '26': '82',
        '27': '23',
        '28': '24',
        '29': '53',
        '3': '83',
        '30': '91',
        '31': '73',
        '32': '73',
        '33': '72',
        '34': '91',
        '35': '53',
        '36': '24',
        '37': '24',
        '38': '82',
        '39': '43',
        '4': '93',
        '40': '72',
        '41': '24',
        '42': '82',
        '43': '83',
        '44': '52',
        '45': '24',
        '46': '73',
        '47': '72',
        '48': '91',
        '49': '52',
        '5': '93',
        '50': '25',
        '51': '21',
        '52': '21',
        '53': '52',
        '54': '41',
        '55': '41',
        '56': '53',
        '57': '41',
        '58': '26',
        '59': '31',
        '6': '93',
        '60': '22',
        '61': '25',
        '62': '31',
        '63': '83',
        '64': '72',
        '65': '73',
        '66': '91',
        '67': '42',
        '68': '42',
        '69': '82',
        '7': '82',
        '70': '43',
        '71': '26',
        '72': '52',
        '73': '82',
        '74': '82',
        '75': '11',
        '76': '23',
        '77': '11',
        '78': '11',
        '79': '54',
        '8': '21',
        '80': '22',
        '81': '73',
        '82': '73',
        '83': '93',
        '84': '93',
        '85': '52',
        '86': '54',
        '87': '74',
        '88': '41',
        '89': '26',
        '9': '73',
        '90': '43',
        '91': '11',
        '92': '11',
        '93': '11',
        '94': '11',
        '95': '11'
      };
      return departements[String(departementId)];
    };

    return Perequations;

  })();

  $(function() {
    if ($("#app").length > 0) {
      return new Perequations;
    }
  });

}).call(this);
